// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/predicate"
	"kubecit-service/ent/slider"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SliderUpdate is the builder for updating Slider entities.
type SliderUpdate struct {
	config
	hooks    []Hook
	mutation *SliderMutation
}

// Where appends a list predicates to the SliderUpdate builder.
func (su *SliderUpdate) Where(ps ...predicate.Slider) *SliderUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTitle sets the "title" field.
func (su *SliderUpdate) SetTitle(s string) *SliderUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetContent sets the "content" field.
func (su *SliderUpdate) SetContent(s string) *SliderUpdate {
	su.mutation.SetContent(s)
	return su
}

// SetImageLink sets the "image_link" field.
func (su *SliderUpdate) SetImageLink(s string) *SliderUpdate {
	su.mutation.SetImageLink(s)
	return su
}

// SetCreateAt sets the "create_at" field.
func (su *SliderUpdate) SetCreateAt(t time.Time) *SliderUpdate {
	su.mutation.SetCreateAt(t)
	return su
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (su *SliderUpdate) SetNillableCreateAt(t *time.Time) *SliderUpdate {
	if t != nil {
		su.SetCreateAt(*t)
	}
	return su
}

// SetUpdateAt sets the "update_at" field.
func (su *SliderUpdate) SetUpdateAt(t time.Time) *SliderUpdate {
	su.mutation.SetUpdateAt(t)
	return su
}

// SetIsValid sets the "is_valid" field.
func (su *SliderUpdate) SetIsValid(b bool) *SliderUpdate {
	su.mutation.SetIsValid(b)
	return su
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (su *SliderUpdate) SetNillableIsValid(b *bool) *SliderUpdate {
	if b != nil {
		su.SetIsValid(*b)
	}
	return su
}

// SetPriority sets the "priority" field.
func (su *SliderUpdate) SetPriority(i int) *SliderUpdate {
	su.mutation.ResetPriority()
	su.mutation.SetPriority(i)
	return su
}

// AddPriority adds i to the "priority" field.
func (su *SliderUpdate) AddPriority(i int) *SliderUpdate {
	su.mutation.AddPriority(i)
	return su
}

// Mutation returns the SliderMutation object of the builder.
func (su *SliderUpdate) Mutation() *SliderMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SliderUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SliderUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SliderUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SliderUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SliderUpdate) defaults() {
	if _, ok := su.mutation.UpdateAt(); !ok {
		v := slider.UpdateDefaultUpdateAt()
		su.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SliderUpdate) check() error {
	if v, ok := su.mutation.Title(); ok {
		if err := slider.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Slider.title": %w`, err)}
		}
	}
	if v, ok := su.mutation.Content(); ok {
		if err := slider.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Slider.content": %w`, err)}
		}
	}
	if v, ok := su.mutation.ImageLink(); ok {
		if err := slider.ImageLinkValidator(v); err != nil {
			return &ValidationError{Name: "image_link", err: fmt.Errorf(`ent: validator failed for field "Slider.image_link": %w`, err)}
		}
	}
	return nil
}

func (su *SliderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(slider.Table, slider.Columns, sqlgraph.NewFieldSpec(slider.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(slider.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Content(); ok {
		_spec.SetField(slider.FieldContent, field.TypeString, value)
	}
	if value, ok := su.mutation.ImageLink(); ok {
		_spec.SetField(slider.FieldImageLink, field.TypeString, value)
	}
	if value, ok := su.mutation.CreateAt(); ok {
		_spec.SetField(slider.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdateAt(); ok {
		_spec.SetField(slider.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.IsValid(); ok {
		_spec.SetField(slider.FieldIsValid, field.TypeBool, value)
	}
	if value, ok := su.mutation.Priority(); ok {
		_spec.SetField(slider.FieldPriority, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedPriority(); ok {
		_spec.AddField(slider.FieldPriority, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SliderUpdateOne is the builder for updating a single Slider entity.
type SliderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SliderMutation
}

// SetTitle sets the "title" field.
func (suo *SliderUpdateOne) SetTitle(s string) *SliderUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetContent sets the "content" field.
func (suo *SliderUpdateOne) SetContent(s string) *SliderUpdateOne {
	suo.mutation.SetContent(s)
	return suo
}

// SetImageLink sets the "image_link" field.
func (suo *SliderUpdateOne) SetImageLink(s string) *SliderUpdateOne {
	suo.mutation.SetImageLink(s)
	return suo
}

// SetCreateAt sets the "create_at" field.
func (suo *SliderUpdateOne) SetCreateAt(t time.Time) *SliderUpdateOne {
	suo.mutation.SetCreateAt(t)
	return suo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (suo *SliderUpdateOne) SetNillableCreateAt(t *time.Time) *SliderUpdateOne {
	if t != nil {
		suo.SetCreateAt(*t)
	}
	return suo
}

// SetUpdateAt sets the "update_at" field.
func (suo *SliderUpdateOne) SetUpdateAt(t time.Time) *SliderUpdateOne {
	suo.mutation.SetUpdateAt(t)
	return suo
}

// SetIsValid sets the "is_valid" field.
func (suo *SliderUpdateOne) SetIsValid(b bool) *SliderUpdateOne {
	suo.mutation.SetIsValid(b)
	return suo
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (suo *SliderUpdateOne) SetNillableIsValid(b *bool) *SliderUpdateOne {
	if b != nil {
		suo.SetIsValid(*b)
	}
	return suo
}

// SetPriority sets the "priority" field.
func (suo *SliderUpdateOne) SetPriority(i int) *SliderUpdateOne {
	suo.mutation.ResetPriority()
	suo.mutation.SetPriority(i)
	return suo
}

// AddPriority adds i to the "priority" field.
func (suo *SliderUpdateOne) AddPriority(i int) *SliderUpdateOne {
	suo.mutation.AddPriority(i)
	return suo
}

// Mutation returns the SliderMutation object of the builder.
func (suo *SliderUpdateOne) Mutation() *SliderMutation {
	return suo.mutation
}

// Where appends a list predicates to the SliderUpdate builder.
func (suo *SliderUpdateOne) Where(ps ...predicate.Slider) *SliderUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SliderUpdateOne) Select(field string, fields ...string) *SliderUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Slider entity.
func (suo *SliderUpdateOne) Save(ctx context.Context) (*Slider, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SliderUpdateOne) SaveX(ctx context.Context) *Slider {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SliderUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SliderUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SliderUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateAt(); !ok {
		v := slider.UpdateDefaultUpdateAt()
		suo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SliderUpdateOne) check() error {
	if v, ok := suo.mutation.Title(); ok {
		if err := slider.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Slider.title": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Content(); ok {
		if err := slider.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Slider.content": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ImageLink(); ok {
		if err := slider.ImageLinkValidator(v); err != nil {
			return &ValidationError{Name: "image_link", err: fmt.Errorf(`ent: validator failed for field "Slider.image_link": %w`, err)}
		}
	}
	return nil
}

func (suo *SliderUpdateOne) sqlSave(ctx context.Context) (_node *Slider, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(slider.Table, slider.Columns, sqlgraph.NewFieldSpec(slider.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Slider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slider.FieldID)
		for _, f := range fields {
			if !slider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(slider.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Content(); ok {
		_spec.SetField(slider.FieldContent, field.TypeString, value)
	}
	if value, ok := suo.mutation.ImageLink(); ok {
		_spec.SetField(slider.FieldImageLink, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreateAt(); ok {
		_spec.SetField(slider.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdateAt(); ok {
		_spec.SetField(slider.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.IsValid(); ok {
		_spec.SetField(slider.FieldIsValid, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Priority(); ok {
		_spec.SetField(slider.FieldPriority, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedPriority(); ok {
		_spec.AddField(slider.FieldPriority, field.TypeInt, value)
	}
	_node = &Slider{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
