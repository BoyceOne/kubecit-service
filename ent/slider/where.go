// Code generated by ent, DO NOT EDIT.

package slider

import (
	"kubecit-service/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldID, id))
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldCreateBy, v))
}

// ImageName applies equality check predicate on the "image_name" field. It's identical to ImageNameEQ.
func ImageName(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldImageName, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldImageURL, v))
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByContains applies the Contains predicate on the "createBy" field.
func CreateByContains(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContains(FieldCreateBy, v))
}

// CreateByHasPrefix applies the HasPrefix predicate on the "createBy" field.
func CreateByHasPrefix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasPrefix(FieldCreateBy, v))
}

// CreateByHasSuffix applies the HasSuffix predicate on the "createBy" field.
func CreateByHasSuffix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasSuffix(FieldCreateBy, v))
}

// CreateByEqualFold applies the EqualFold predicate on the "createBy" field.
func CreateByEqualFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEqualFold(FieldCreateBy, v))
}

// CreateByContainsFold applies the ContainsFold predicate on the "createBy" field.
func CreateByContainsFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContainsFold(FieldCreateBy, v))
}

// ImageNameEQ applies the EQ predicate on the "image_name" field.
func ImageNameEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldImageName, v))
}

// ImageNameNEQ applies the NEQ predicate on the "image_name" field.
func ImageNameNEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldImageName, v))
}

// ImageNameIn applies the In predicate on the "image_name" field.
func ImageNameIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldImageName, vs...))
}

// ImageNameNotIn applies the NotIn predicate on the "image_name" field.
func ImageNameNotIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldImageName, vs...))
}

// ImageNameGT applies the GT predicate on the "image_name" field.
func ImageNameGT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldImageName, v))
}

// ImageNameGTE applies the GTE predicate on the "image_name" field.
func ImageNameGTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldImageName, v))
}

// ImageNameLT applies the LT predicate on the "image_name" field.
func ImageNameLT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldImageName, v))
}

// ImageNameLTE applies the LTE predicate on the "image_name" field.
func ImageNameLTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldImageName, v))
}

// ImageNameContains applies the Contains predicate on the "image_name" field.
func ImageNameContains(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContains(FieldImageName, v))
}

// ImageNameHasPrefix applies the HasPrefix predicate on the "image_name" field.
func ImageNameHasPrefix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasPrefix(FieldImageName, v))
}

// ImageNameHasSuffix applies the HasSuffix predicate on the "image_name" field.
func ImageNameHasSuffix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasSuffix(FieldImageName, v))
}

// ImageNameEqualFold applies the EqualFold predicate on the "image_name" field.
func ImageNameEqualFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEqualFold(FieldImageName, v))
}

// ImageNameContainsFold applies the ContainsFold predicate on the "image_name" field.
func ImageNameContainsFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContainsFold(FieldImageName, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContainsFold(FieldImageURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Slider) predicate.Slider {
	return predicate.Slider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Slider) predicate.Slider {
	return predicate.Slider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Slider) predicate.Slider {
	return predicate.Slider(func(s *sql.Selector) {
		p(s.Not())
	})
}
