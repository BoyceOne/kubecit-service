// Code generated by ent, DO NOT EDIT.

package slider

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldContent, v))
}

// ImageLink applies equality check predicate on the "image_link" field. It's identical to ImageLinkEQ.
func ImageLink(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldImageLink, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldUpdateAt, v))
}

// IsValid applies equality check predicate on the "is_valid" field. It's identical to IsValidEQ.
func IsValid(v bool) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldIsValid, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldPriority, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContainsFold(FieldContent, v))
}

// ImageLinkEQ applies the EQ predicate on the "image_link" field.
func ImageLinkEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldImageLink, v))
}

// ImageLinkNEQ applies the NEQ predicate on the "image_link" field.
func ImageLinkNEQ(v string) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldImageLink, v))
}

// ImageLinkIn applies the In predicate on the "image_link" field.
func ImageLinkIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldImageLink, vs...))
}

// ImageLinkNotIn applies the NotIn predicate on the "image_link" field.
func ImageLinkNotIn(vs ...string) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldImageLink, vs...))
}

// ImageLinkGT applies the GT predicate on the "image_link" field.
func ImageLinkGT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldImageLink, v))
}

// ImageLinkGTE applies the GTE predicate on the "image_link" field.
func ImageLinkGTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldImageLink, v))
}

// ImageLinkLT applies the LT predicate on the "image_link" field.
func ImageLinkLT(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldImageLink, v))
}

// ImageLinkLTE applies the LTE predicate on the "image_link" field.
func ImageLinkLTE(v string) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldImageLink, v))
}

// ImageLinkContains applies the Contains predicate on the "image_link" field.
func ImageLinkContains(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContains(FieldImageLink, v))
}

// ImageLinkHasPrefix applies the HasPrefix predicate on the "image_link" field.
func ImageLinkHasPrefix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasPrefix(FieldImageLink, v))
}

// ImageLinkHasSuffix applies the HasSuffix predicate on the "image_link" field.
func ImageLinkHasSuffix(v string) predicate.Slider {
	return predicate.Slider(sql.FieldHasSuffix(FieldImageLink, v))
}

// ImageLinkEqualFold applies the EqualFold predicate on the "image_link" field.
func ImageLinkEqualFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldEqualFold(FieldImageLink, v))
}

// ImageLinkContainsFold applies the ContainsFold predicate on the "image_link" field.
func ImageLinkContainsFold(v string) predicate.Slider {
	return predicate.Slider(sql.FieldContainsFold(FieldImageLink, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldUpdateAt, v))
}

// IsValidEQ applies the EQ predicate on the "is_valid" field.
func IsValidEQ(v bool) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldIsValid, v))
}

// IsValidNEQ applies the NEQ predicate on the "is_valid" field.
func IsValidNEQ(v bool) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldIsValid, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Slider {
	return predicate.Slider(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Slider {
	return predicate.Slider(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Slider {
	return predicate.Slider(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Slider {
	return predicate.Slider(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Slider {
	return predicate.Slider(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Slider {
	return predicate.Slider(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Slider {
	return predicate.Slider(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Slider {
	return predicate.Slider(sql.FieldLTE(FieldPriority, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Slider) predicate.Slider {
	return predicate.Slider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Slider) predicate.Slider {
	return predicate.Slider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Slider) predicate.Slider {
	return predicate.Slider(func(s *sql.Selector) {
		p(s.Not())
	})
}
