// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/slider"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SliderCreate is the builder for creating a Slider entity.
type SliderCreate struct {
	config
	mutation *SliderMutation
	hooks    []Hook
}

// SetCreateBy sets the "createBy" field.
func (sc *SliderCreate) SetCreateBy(s string) *SliderCreate {
	sc.mutation.SetCreateBy(s)
	return sc
}

// SetImageName sets the "image_name" field.
func (sc *SliderCreate) SetImageName(s string) *SliderCreate {
	sc.mutation.SetImageName(s)
	return sc
}

// SetImageURL sets the "image_url" field.
func (sc *SliderCreate) SetImageURL(s string) *SliderCreate {
	sc.mutation.SetImageURL(s)
	return sc
}

// Mutation returns the SliderMutation object of the builder.
func (sc *SliderCreate) Mutation() *SliderMutation {
	return sc.mutation
}

// Save creates the Slider in the database.
func (sc *SliderCreate) Save(ctx context.Context) (*Slider, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SliderCreate) SaveX(ctx context.Context) *Slider {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SliderCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SliderCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SliderCreate) check() error {
	if _, ok := sc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "Slider.createBy"`)}
	}
	if _, ok := sc.mutation.ImageName(); !ok {
		return &ValidationError{Name: "image_name", err: errors.New(`ent: missing required field "Slider.image_name"`)}
	}
	if _, ok := sc.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "Slider.image_url"`)}
	}
	return nil
}

func (sc *SliderCreate) sqlSave(ctx context.Context) (*Slider, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SliderCreate) createSpec() (*Slider, *sqlgraph.CreateSpec) {
	var (
		_node = &Slider{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(slider.Table, sqlgraph.NewFieldSpec(slider.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.CreateBy(); ok {
		_spec.SetField(slider.FieldCreateBy, field.TypeString, value)
		_node.CreateBy = value
	}
	if value, ok := sc.mutation.ImageName(); ok {
		_spec.SetField(slider.FieldImageName, field.TypeString, value)
		_node.ImageName = value
	}
	if value, ok := sc.mutation.ImageURL(); ok {
		_spec.SetField(slider.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	return _node, _spec
}

// SliderCreateBulk is the builder for creating many Slider entities in bulk.
type SliderCreateBulk struct {
	config
	builders []*SliderCreate
}

// Save creates the Slider entities in the database.
func (scb *SliderCreateBulk) Save(ctx context.Context) ([]*Slider, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Slider, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SliderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SliderCreateBulk) SaveX(ctx context.Context) []*Slider {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SliderCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SliderCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
