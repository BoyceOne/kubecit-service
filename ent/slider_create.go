// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/slider"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SliderCreate is the builder for creating a Slider entity.
type SliderCreate struct {
	config
	mutation *SliderMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sc *SliderCreate) SetTitle(s string) *SliderCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetContent sets the "content" field.
func (sc *SliderCreate) SetContent(s string) *SliderCreate {
	sc.mutation.SetContent(s)
	return sc
}

// SetImageLink sets the "image_link" field.
func (sc *SliderCreate) SetImageLink(s string) *SliderCreate {
	sc.mutation.SetImageLink(s)
	return sc
}

// SetCreateAt sets the "create_at" field.
func (sc *SliderCreate) SetCreateAt(t time.Time) *SliderCreate {
	sc.mutation.SetCreateAt(t)
	return sc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (sc *SliderCreate) SetNillableCreateAt(t *time.Time) *SliderCreate {
	if t != nil {
		sc.SetCreateAt(*t)
	}
	return sc
}

// SetUpdateAt sets the "update_at" field.
func (sc *SliderCreate) SetUpdateAt(t time.Time) *SliderCreate {
	sc.mutation.SetUpdateAt(t)
	return sc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (sc *SliderCreate) SetNillableUpdateAt(t *time.Time) *SliderCreate {
	if t != nil {
		sc.SetUpdateAt(*t)
	}
	return sc
}

// SetIsValid sets the "is_valid" field.
func (sc *SliderCreate) SetIsValid(b bool) *SliderCreate {
	sc.mutation.SetIsValid(b)
	return sc
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (sc *SliderCreate) SetNillableIsValid(b *bool) *SliderCreate {
	if b != nil {
		sc.SetIsValid(*b)
	}
	return sc
}

// SetPriority sets the "priority" field.
func (sc *SliderCreate) SetPriority(i int) *SliderCreate {
	sc.mutation.SetPriority(i)
	return sc
}

// Mutation returns the SliderMutation object of the builder.
func (sc *SliderCreate) Mutation() *SliderMutation {
	return sc.mutation
}

// Save creates the Slider in the database.
func (sc *SliderCreate) Save(ctx context.Context) (*Slider, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SliderCreate) SaveX(ctx context.Context) *Slider {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SliderCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SliderCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SliderCreate) defaults() {
	if _, ok := sc.mutation.CreateAt(); !ok {
		v := slider.DefaultCreateAt
		sc.mutation.SetCreateAt(v)
	}
	if _, ok := sc.mutation.UpdateAt(); !ok {
		v := slider.DefaultUpdateAt
		sc.mutation.SetUpdateAt(v)
	}
	if _, ok := sc.mutation.IsValid(); !ok {
		v := slider.DefaultIsValid
		sc.mutation.SetIsValid(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SliderCreate) check() error {
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Slider.title"`)}
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := slider.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Slider.title": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Slider.content"`)}
	}
	if v, ok := sc.mutation.Content(); ok {
		if err := slider.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Slider.content": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ImageLink(); !ok {
		return &ValidationError{Name: "image_link", err: errors.New(`ent: missing required field "Slider.image_link"`)}
	}
	if v, ok := sc.mutation.ImageLink(); ok {
		if err := slider.ImageLinkValidator(v); err != nil {
			return &ValidationError{Name: "image_link", err: fmt.Errorf(`ent: validator failed for field "Slider.image_link": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Slider.create_at"`)}
	}
	if _, ok := sc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Slider.update_at"`)}
	}
	if _, ok := sc.mutation.IsValid(); !ok {
		return &ValidationError{Name: "is_valid", err: errors.New(`ent: missing required field "Slider.is_valid"`)}
	}
	if _, ok := sc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Slider.priority"`)}
	}
	return nil
}

func (sc *SliderCreate) sqlSave(ctx context.Context) (*Slider, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SliderCreate) createSpec() (*Slider, *sqlgraph.CreateSpec) {
	var (
		_node = &Slider{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(slider.Table, sqlgraph.NewFieldSpec(slider.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(slider.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Content(); ok {
		_spec.SetField(slider.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := sc.mutation.ImageLink(); ok {
		_spec.SetField(slider.FieldImageLink, field.TypeString, value)
		_node.ImageLink = value
	}
	if value, ok := sc.mutation.CreateAt(); ok {
		_spec.SetField(slider.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := sc.mutation.UpdateAt(); ok {
		_spec.SetField(slider.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := sc.mutation.IsValid(); ok {
		_spec.SetField(slider.FieldIsValid, field.TypeBool, value)
		_node.IsValid = value
	}
	if value, ok := sc.mutation.Priority(); ok {
		_spec.SetField(slider.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	return _node, _spec
}

// SliderCreateBulk is the builder for creating many Slider entities in bulk.
type SliderCreateBulk struct {
	config
	builders []*SliderCreate
}

// Save creates the Slider entities in the database.
func (scb *SliderCreateBulk) Save(ctx context.Context) ([]*Slider, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Slider, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SliderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SliderCreateBulk) SaveX(ctx context.Context) []*Slider {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SliderCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SliderCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
